#!/usr/bin/env python3


import shlex       # Sanitize strings sent to bash
import subprocess  # Pushing bash commands
import sys         # argv
import string      # Clearing jobstats entries of M's, G's, etc
import pprint
import re
import shutil      # Get terminal width
import statistics
import mysql.connector as mysql


class Colors:
    GREEN   = '\033[92m'
    CYAN    = '\033[36m'
    YELLOW  = '\033[93m'
    ORANGE  = '\033[208m'
    RED     = '\033[91m'
    END     = '\033[0m'


def getSlurmAccountUsers(acc):
    """
    Desc: Get a list of slurm users who belong to a given account.

    Args:
        acc (string): name of slurm account to search

    Returns:
        List of account user names. None of account doesn't exist/no users
        belong to it.
    """
    out = subprocess.getstatusoutput('sshare -a -P')[1].split('\n')
    users = []

    for i in out:
        users.append(i.split('|'))
        
    users = [i for i in users if acc in i[0]]

    users = [i[1] for i in users if not i[1] == 'parent' and not i[1] == '']

    return users


def getSlurmAccounts():
    out = subprocess.getstatusoutput('sshare -l -P')[1].split('\n')[1::]
    accounts = []

    for i in out:
        accounts.append(i.split('|'))
        
    accountNames = []
    for i in accounts :
        if i[0].strip() not in accountNames:
            accountNames.append(i[0].strip())

    return accountNames


def getJobStats(cursor, account, fromDate=None, toDate=None):
    """
    Desc: Retrieve jobstate data from the database

    Args:
        account (string): Name of slurm account
        fromDate (string) (optional): Add a start date
        toDate (string) (optional): Add an end date
        cursor (mysql.connector): Reuse a mysql connection instead of
                               initializing a new one

    Returns:
        List of dictionaries containing jobstats data for a user
    """
    data = []

    query =  'SELECT uaername,memoryreq,memoryuse,idealcpu,cputime,tlimitreq,tlimituse'
    query += ' FROM jobs WHERE account = %s'

    args = [account]

    if fromDate:
        query += ' AND date >= %s' + fromDate
        args.append(fromDate)

    if toDate:
        if fromDate:
            query += ' AND'

        query += 'date <= ' + toDate
        args.append(toDate)

    cursor.execute(query, tuple(args))

    for username, memory_req, memory_use, ideal_cpu, cpu_time, tlimit_req, tlimit_use in cursor:
        args.append({
            'username': username,
            'memory-req': memory_req,
            'memory-use': memory_use,
            'ideal-cpu': ideal_cpu,
            'cpu-time': cpu_time,
            'tlimit-req': tlimit_req,
            'tlimit-use': tlimit_use
        })

    return data


def parseAccountStats(data):
    """
    Desc: Parse a retrieved account's jobstats data.

    Args:
        data: array of dictionaries representing day efficiencies for a user

    Returns:
        {
            'memory': float,
            'cpu': float,
            'tlimit': float,
            'users': {
                username: {
                    'memory:' float,
                    'cpu': float,
                    'tlimit': float
                },
                ...
            }
        }
    """
    out = {
        'memory': None,
        'cpu':    None,
        'tlimit': None,
        'users': {}
    }

    # account-wide score
    tlimit = [0, 0]
    cpu    = [0, 0]
    memory = [0, 0]

    # store user stats in temporary place
    users = {}

    for entry in data:
        if entry['username'] not in users:
            users[entry['username']] = {
                'tlimit': [0, 0],
                'cpu':    [0, 0],
                'memory': [0, 0]
            }

        users[entry['username']]['tlimit'][0] += entry['tlimit-use']
        users[entry['username']]['tlimit'][1] += entry['tlimit-req']
        tlimit[0] += entry['tlimit-use']
        tlimit[1] += entry['tlimit-req']

        users[entry['username']]['cpu'][0] += entry['cpu-time']
        users[entry['username']]['cpu'][1] += entry['ideal-cpu']
        cpu[0] += entry['cpu-time']
        cpu[1] += entry['ideal-cpu']

        users[entry['username']]['memory'][0] += entry['memory-use']
        users[entry['username']]['memory'][1] += entry['memory-req']
        memory[0] += entry['memory-use'] 
        memory[1] += entry['memory-req']

    out['memory'] = round(memory[0] / memory[1], 2) if 0 != memory[1] else None
    out['cpu']    = round(cpu[0] / cpu[1], 2) if 0 != cpu[1] else None
    out['tlimit'] = round(tlimit[0] / tlimit[1], 2) if 0 != tlimit[1] else None
        
    for user in users:
        out['users'][user] = {
            'memory': round(users[user]['memory'][0] / users[user]['memory'][1], 2),
            'tlimit': round(users[user]['tlimit'][0] / users[user]['tlimit'][1], 2),
            'cpu':    round(users[user]['cpu'][0] / users[user]['cpu'][1], 2),
        }

    return out


def timeStringToSeconds(timeString):
    """
    Desc: Convert a time string to seconds total elapsed.

    Args:
        timeString (string): Timestamp of the form 'D-HH:MM:SS.SSS'

    Returns:
        Integer or floating point representation of seconds elapsed.
    """
    rightDecimal = 0
    timeInSeconds = 0
    timeIndex = 0

    timeParsed = timeString.split('.')

    if len(timeParsed) > 1:
        timeInSeconds += float('0.' + timeParsed[1])

    timeParsed = timeParsed[0]
    
    timeParsed = re.split('-|:', timeParsed)

    # Does elapsed contain days? (*1-*00:00:00)
    if len(timeParsed) == 4:
        timeInSeconds += int(timeParsed[0]) * 24 * 60 * 60

    # Does time contain hours?
    if len(timeParsed) >= 3:
        timeInSeconds += int(timeParsed[-3]) * 60 * 60  # Hours

    # Does time contain minutes?
    if len(timeParsed) >= 2:
        timeInSeconds += int(timeParsed[-2]) * 60       # Minutes
    
    # Does time contain seconds?
    if len(timeParsed) >= 1:
        timeInSeconds += int(timeParsed[-1])            # Seconds

    return timeInSeconds


def main():
    SHOW_EMPTY_USERS = False
    NO_SIZE_LIMIT    = False
    PARSEABLE        = False
    START_DATE       = None
    END_DATE         = None
    ALL_ACCOUNTS     = False
    NO_COLOR         = False

    if '--no-color' in sys.argv:
        NO_COLOR = True
        sys.argv.remove('--no-color')

    if '-S' in sys.argv:
        START_DATE = sys.argv[sys.argv.index('-S') + 1]
        sys.argv.remove('-S')
        sys.argv.remove(START_DATE)

    if '-E' in sys.argv:
        END_DATE = sys.argv[sys.argv.index('-E') + 1]
        sys.argv.remove('-E')
        sys.argv.remove(END_DATE)

    if '--parseable' in sys.argv:
        PARSEABLE = True
        sys.argv.remove('--parseable')

    if '--show-empty' in sys.argv:
        SHOW_EMPTY_USERS = True
        sys.argv.remove('--show-empty')

    if '--all-accounts' in sys.argv:
        ALL_ACCOUNTS = True
        sys.argv.remove('--all-accounts')

    if not ALL_ACCOUNTS and (len(sys.argv) == 1 or '--help' in sys.argv):
        print('Usage: ', sys.argv[0].split('/')[-1], ' [ACCOUNT] [OPTION]...')
        print('Show usage statistics for a slurm account and it\'s users')
        print('\n  --show-empty    show slurm users with no jobs')
        print('  --parseable     make output parseable')
        print('  -S X            show stats for jobs since some date')
        print('  -E X            show stats for jobs up to some date')
        print('  --all-accounts  run for all accounts on slurm')
        print('  --no-color      do not colorize stats')
        print('\nGot bugs? Report to hpcsupport@nau.edu')
        exit()

    terminalWidth = shutil.get_terminal_size((80, 80))[0]
    columnWidth = int(terminalWidth / 5)

    labelString = ''

    if not PARSEABLE:
        if ALL_ACCOUNTS:
            labelString =  'Account' + ' ' * (columnWidth - len('Account'))
        
        else:
            labelString =  'User' + ' ' * (columnWidth - len('User'))
        
        labelString += 'Mem' + ' ' * (columnWidth - len('Mem'))
        labelString += 'CPU' + ' ' * (columnWidth - len('CPU'))
        labelString += 'TLimit' + ' ' * (columnWidth - len('TLimit'))
        labelString += 'Total' + ' ' * (columnWidth - len('Total'))
    
    else:
        if ALL_ACCOUNTS:
            labelString = 'Account|Mem|CPU|TLimit|Total'

        labelString = 'User|Mem|CPU|TLimit|Total'

    print(labelString)

    if not PARSEABLE:
        print('=' * terminalWidth)

    accountStats = [None, None, None]
    resourcesReserved = [0, 0, 0]
    resourcesUsed = [0, 0, 0]

    if ALL_ACCOUNTS:
        accounts = getSlurmAccounts()
        for account in accounts:
            stats = parseAccountStats(getAccountJobStats(account, START_DATE, END_DATE))

            final = [stats['memory'], stats['cpu'], stats['tlimit']]

            totalGrades = [stats['']]

            if len(totalGrades) > 0:
                total = str(round(statistics.mean(totalGrades), 2))

            if final == ['-', '-', '-'] and not SHOW_EMPTY_USERS:
                continue
           
            if not PARSEABLE:
                if len(account) < columnWidth:
                    userStatsString = account
                
                else:
                    userStatsString = account[:columnWidth-1] + '+'

                userStatsString += ' ' * (columnWidth - len(account))                    

                for i in range(len(final)):
                    grade = ''
                    gradeEnd = ''
                    if not NO_COLOR and final[i] != '-':
                        if float(final[i]) < 33:
                            grade = Colors.RED

                        elif float(final[i]) < 66:
                            grade = Colors.YELLOW
                        
                        else:
                            grade = Colors.GREEN

                        gradeEnd = Colors.END
                    
                    userStatsString += grade + str(final[i])
                    userStatsString += gradeEnd
                    userStatsString += ' ' * (columnWidth \
                                              - len(str(final[i])))
               
                userStatsString += total
                userStatsString += ' ' * (columnWidth - len(total))


            else:
                userStatsString =  account + '|' + str(final[0]) + '|'
                userStatsString += str(final[1]) + '|'
                userStatsString += str(final[2]) + '|' + total

            for i in range(len(final)):
                if final[i] != '-':
                    if accountStats[i]:
                        accountStats[i].append(final[i])
                    
                    else:
                        accountStats[i] = [final[i]]

            print(userStatsString)
    
    else:
        account = sys.argv[1]
        users = getSlurmAccountUsers(account)
        jobs = getJobStats(account, START_DATE, END_DATE)

        for user in users:
            userJobs = []
            for i in jobs:
                if len(i) >= 9 and i[8] == user:
                    userJobs.append(i)
        
                elif i[0].split('.')[0] in [j[0] for j in userJobs]:
                    userJobs.append(i)

            stats = getUserJobStats(userJobs)
            
            if not stats and SHOW_EMPTY_USERS:
                stats = [['-', '-', '-'], [0, 0], [0, 0], [0, 0]]

            if stats:
                resourcesReserved[0] += stats[1][1]
                resourcesReserved[1] += stats[2][1]
                resourcesReserved[2] += stats[3][1]

                resourcesUsed[0] += stats[1][0]
                resourcesUsed[1] += stats[2][0]
                resourcesUsed[2] += stats[3][0]

                userStatsString = ''
                
                totalGrades = [i for i in stats[0] if i != '-'] 
                total = '-'
                if len(totalGrades) > 0:
                    total = str(round(statistics.mean(totalGrades), 2))
                
                if not PARSEABLE:
                    userStatsString = user
                    userStatsString += ' ' * (columnWidth - len(user))                    

                    for i in range(len(stats[0])):
                        grade = ''
                        gradeEnd = ''
                        if not NO_COLOR and stats[0][i] != '-':
                            if stats[0][i] < 33:
                                grade = Colors.RED

                            elif stats[0][i] < 66:
                                grade = Colors.YELLOW
                            
                            else:
                                grade = Colors.GREEN

                            gradeEnd = Colors.END
                        
                        userStatsString += grade + str(stats[0][i]) + gradeEnd
                        userStatsString += ' ' * (columnWidth \
                                                  - len(str(stats[0][i])))
                   
                    userStatsString += total
                    userStatsString += ' ' * (columnWidth - len(total))

                else:
                    userStatsString =  user + '|' + str(stats[0][0]) + '|'
                    userStatsString += str(stats[0][1]) + '|' 
                    userStatsString += str(stats[0][2]) + '|'
                    userStatsString += total

                print(userStatsString)

    # Calculate slurm account stats
    finalStats = ['-', '-', '-']

    if not ALL_ACCOUNTS:
        if resourcesReserved[0] != 0:
            finalStats[0] = round(resourcesUsed[0] / resourcesReserved[0] * 100, 2)

        if resourcesReserved[1] != 0:
            finalStats[1] = round(resourcesUsed[1] / resourcesReserved[1] * 100, 2)

        if resourcesReserved[2] != 0:
            finalStats[2] = round(resourcesUsed[2] / resourcesReserved[2] * 100, 2)

    else:
        finalStats[0] = round(statistics.mean(accountStats[0]), 2)
        finalStats[1] = round(statistics.mean(accountStats[1]), 2)
        finalStats[2] = round(statistics.mean(accountStats[2]), 2)

    finalGrades = [i for i in finalStats if i != '-']
    finalMean = '-'
    if len(finalGrades) > 0:
        finalMean = str(round(statistics.mean(finalGrades), 2))

    finalStatsString = ''

    if not PARSEABLE:
        print('=' * terminalWidth + '\n')
        finalStatsString =  'Requested Memory: ' + str(finalStats[0]) + '\n'
        finalStatsString += 'Requested Cores : ' + str(finalStats[1]) + '\n'
        finalStatsString += 'Time Limit      : ' + str(finalStats[2]) + '\n'
        finalStatsString += '=' * len('Efficiency Score: ' + finalMean) + '\n'
        finalStatsString += 'Efficiency Score: ' + finalMean + '\n'
        finalStatsString += '=' * len('Efficiency Score: ' + finalMean) + '\n'

    else:
        finalStatsString =  'STATS|' + str(finalStats[0]) + '|'
        finalStatsString += str(finalStats[1]) + '|' + str(finalStats[2]) + '|'
        finalStatsString += finalMean

    print(finalStatsString)

if __name__ == '__main__':
    main()
